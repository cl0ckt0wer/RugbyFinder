@using RugbyFinder.Shared
@using System.Web;
@page "/teamcreator"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>Create a new Team</h3>

<EditForm Model="@teamModel" OnValidSubmit="@CreateTeamAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label for="name">Team Name</label>
    <InputText class="form-control" id="name" @bind-Value="teamModel.TeamName" />
    <label for="bio">Team Bio</label>
    <InputTextArea class="form-control" id="bio" @bind-Value="teamModel.TeamBio" />
    <label for="city">City</label>
    <InputSelect class="form-control" id="city" @bind-Value="teamModel.City.CityId">
        <option value="">Please Select A Home City For This Team</option>
        @foreach (var c in cityInfos)
        {
            <option value="@c.CityId">@c.City</option>
        }
    </InputSelect>
    <label for="teampic">Team Profile Picture</label>
    <InputFile class="form-control" id="teampic" OnChange="@OnInputFileChange"></InputFile>
    <img id="profilepic" src="@teamModel.TeamImageURI" />
    <button class="button button-primary form-control" type="submit">Submit</button>
</EditForm>




@code {
    public string Key { get; set; }
    TeamPostModel teamModel = new TeamPostModel();
    IEnumerable<CityInfo> cityInfos = new CityInfo[0];
    string format = "image/png";



    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("ONinit team create");
        Key = await localStorage.GetItemAsync<string>("key");
        var test = await Http.GetStringAsync($"city/getcity/{HttpUtility.UrlEncode(Key)}");
        Console.WriteLine(test);
        cityInfos = await Http.GetFromJsonAsync<IEnumerable<CityInfo>>($"city/getcity/{HttpUtility.UrlEncode(Key)}");
        var myInfo = await Http.GetFromJsonAsync<MyInfo>($"MyProfile/{HttpUtility.UrlEncode(Key)}");
        if (myInfo.MyName.Length < 2)
        {
            NavigationManager.NavigateTo("/editrugger");
        }
    }
    async Task CreateTeamAsync()
    {
        if (teamModel.City.CityId != 0)
        {
            teamModel.TeamId = Guid.NewGuid();
            teamModel.RuggerOwnerKey = Key;
            await Http.PostAsJsonAsync($"/teams/", teamModel);
            NavigationManager.NavigateTo("/");
        }
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {

        var browserFile = await e.File.RequestImageFileAsync(format, 300, 300);
        using (var stream = browserFile.OpenReadStream(maxAllowedSize: 8000000))
        {
            var buffer = new byte[stream.Length];
            await stream.ReadAsync(buffer);
            teamModel.TeamPic = buffer;
        }

    }
}
