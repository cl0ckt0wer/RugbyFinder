@using AspNetMonsters.Blazor.Geolocation
@using BlazorApp2.Shared
@inject LocationService  LocationService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@page "/messagesinbox"
<h3>Message Inbox</h3>
@foreach (var f in inbox)
{
    <div class="card" >
        <div class="card-body">
            <h5 class="card-title">@f.Name</h5>
            <h6 class="card-subtitle mb-2 text-muted">@f.LastMessage</h6>
            <p class="card-text">@f.MessageCount messages</p>
            <a href="/messagerugger/@f.Id" class="card-link">Messages</a>
        </div>
    </div>
}
@if(!inbox.Any())
            {
                <h3>You have no messages :(</h3>
            }


@code {
    public string Key { get; set; }
    IEnumerable<InboxItem> inbox = new List<InboxItem>();

    protected override async Task OnInitializedAsync()
    {
        Key = await localStorage.GetItemAsync<string>("key");
        //THOU SHALT NOT CALL A ROUTE INBOX
        //try
        //{
        //    var get = await Http.GetAsync($"ruggerinbox/{guidstring}");
        //    var response = await get.Content.ReadAsStringAsync();
        //}
        //catch(Exception ex)
        //{
        //    var x = ex;
        //}

        inbox = await Http.GetFromJsonAsync<IEnumerable<InboxItem>>($"ruggerinbox/{Key}");

    }
}
