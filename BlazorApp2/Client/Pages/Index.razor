@using AspNetMonsters.Blazor.Geolocation
@using BlazorApp2.Shared
@inject LocationService  LocationService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage


@page "/"


@if (debug)
{
    <div class="container-fluid">
        <h1>Welcome @myInfo.MyName</h1>
        <img id="profilepic" src="@imageDataUri" class="img-fluid float-right" />
        <p>
            Your Bio: @myInfo.MyBio
        </p>
        <h3>You are here</h3>
        <div class="container">
            Lat: @location?.Latitude <br />
            Long: @location?.Longitude <br />
            Accuracy: @location?.Accuracy <br />

        </div>
        <h3>Your city info</h3>
        <div class="container">
            Country: @closestCity?.Country <br />
            State: @closestCity?.Admin_name <br />
            City: @closestCity?.City <br />
            My Team: @myInfo.TeamName <br />

        </div>
    </div>
   
    <div class="container-fluid float-right">
        <button @onclick="PickATeam" class="btn btn-primary float-right" href="/teampicker" role="button" disabled="@teambuttondisabled">Pick a Team</button>
    </div>





    <EditForm Model="@myInfo" OnValidSubmit="@UpdateNameAsync">

        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="name">Change your name</label>
            <InputText class="form-control" id="name" @bind-Value="@myInfo.MyName" />
        </div>
        <div class="form-group">
            <label for="bio">Change your bio</label>
            <InputTextArea class="form-control" id="bio" @bind-Value="@myInfo.MyBio" />
        </div>
        <button class="btn btn-primary" type="submit">Submit</button>

    </EditForm>
    <div class="form-group">

        <label for="selectpic">Select a Profile Picture</label>
        <InputFile class="form-control-file" id="selectpic" OnChange="@OnInputFileChange" />
    </div>
    @if (tm.TeamId != Guid.Empty)
    {
        <EditForm Model="@tm" OnValidSubmit="@UpdateTeamAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="teamname">Edit your Team Name</label>
                <InputText class="form-control" id="teamname" @bind-Value="@tm.TeamName" />
            </div>
            <div class="form-group">
                <label for="teambio">
                    Edit your teams bio
                </label>
                <InputTextArea class="form-control" id="teambio" @bind-Value="@tm.TeamBio"></InputTextArea>

            </div>
            <div class="form-group">
                <label for="teamcity">Change Team City</label>
                <InputSelect class="form-control" id="teamcity" @bind-Value="tm.City.CityId">
                    <option value="@tm.City.CityId">@tm.City.City</option>
                    @foreach (var c in cityInfos)
                            {
                        @if (tm.City.CityId != c.CityId)
                                {
                            <option value="@c.CityId">@c.City</option>
                                }
                            }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="teampic">Team Profile Picture</label>
                <InputFile class="form-control" id="teampic" OnChange="@TeamPicChange"></InputFile>

                <img id="profilepic" src="@tm.TeamImageURI" />


            </div>


            <button class="btn btn-primary" type="submit">Submit</button>
        </EditForm>

    }
}
else
{ <h1>Loading...</h1>}




@functions
{
    Location location;
    CityInfo closestCity;
    Guid guid = Guid.Empty;
    string guidstring = string.Empty;
    //IndexModel indexModel = new IndexModel() { MyBio = string.Empty, MyName = string.Empty };
    //TeamModel teamModel = new TeamModel();
    MyInfo myInfo = new MyInfo() { MyBio = string.Empty, TeamId = Guid.Empty, TeamName = string.Empty, MyName = string.Empty };
    bool debug = false;
    string imageDataUri = "";
    string format = "image/png";
    bool teambuttondisabled = true;
    TeamPostModel tm = new TeamPostModel();
    IEnumerable<CityInfo> cityInfos = new CityInfo[0];

    protected override async Task OnInitializedAsync()
    {
#if DEBUG

        //await Task.Delay(5000);
#endif
        location = await LocationService.GetLocationAsync();
        guidstring = await localStorage.GetItemAsync<string>("guid");
        if (string.IsNullOrEmpty(guidstring))
        {
            guid = Guid.NewGuid();
            await localStorage.SetItemAsync("guid", guid.ToString());
            guidstring = guid.ToString();
        }
        else
        {
            if (!Guid.TryParse(guidstring, out guid))
            {
                guid = Guid.NewGuid();
                await localStorage.SetItemAsync("guid", guid.ToString());
                guidstring = guid.ToString();
            }
        }
        var args = new CityInfoArgs();
        args.MyGuid = guid;
        args.Lat = (double)location.Latitude;
        args.Lng = (double)location.Longitude;
        var response = await Http.PostAsJsonAsync("City", args);
        myInfo = await Http.GetFromJsonAsync<MyInfo>($"Name/{guid}");
        if (!string.IsNullOrEmpty(myInfo.MyName))
        {
            teambuttondisabled = false;
        }
        closestCity = await response.Content.ReadFromJsonAsync<CityInfo>();
        if (myInfo.ProfilePic != null && myInfo.ProfilePic.Length > 0)
        {
            imageDataUri = $"data:{format};base64,{Convert.ToBase64String(myInfo.ProfilePic)}";
        }
        tm = await Http.GetFromJsonAsync<TeamPostModel>($"teamowner/{guid}");
        cityInfos = await Http.GetFromJsonAsync<IEnumerable<CityInfo>>($"City/{guidstring}");
        debug = true;

    }
    private async Task UpdateNameAsync()
    {
        if (!string.IsNullOrEmpty(myInfo.MyName))
        {
            var args = new UpdateRuggerArgs();
            args.MyName = myInfo.MyName;
            args.MyGuid = guid;
            args.Bio = myInfo.MyBio;
            await Http.PostAsJsonAsync("Name", args);
            teambuttondisabled = false;
        }


    }
    private async Task UpdateTeamAsync()
    {
        if (!string.IsNullOrEmpty(tm.TeamName))
        {
            var args = (TeamPostModel)tm;
            args.RuggerOwner = guid;
            await Http.PostAsJsonAsync("/teams", args);
        }
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {

        var browserFile = await e.File.RequestImageFileAsync(format, 300, 300);
        using var stream = browserFile.OpenReadStream(maxAllowedSize: 8000000);
        var buffer = new byte[stream.Length];
        await stream.ReadAsync(buffer);
        var args = new RuggerPic() { Pic = buffer, RuggerId = guid };
        await Http.PostAsJsonAsync("RuggerPic", args);
        imageDataUri = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    }
    private void PickATeam()
    {
        NavigationManager.NavigateTo("/teampicker");
    }
    private async void TeamPicChange(InputFileChangeEventArgs e)
    {
        var browserFile = await e.File.RequestImageFileAsync(format, 300, 300);
        using var stream = browserFile.OpenReadStream(maxAllowedSize: 8000000);
        var buffer = new byte[stream.Length];
        await stream.ReadAsync(buffer);
        tm.TeamPic = buffer;
        var x = (tm.TeamImageURI == $"data:{format};base64,{Convert.ToBase64String(buffer)}");
    }

}
