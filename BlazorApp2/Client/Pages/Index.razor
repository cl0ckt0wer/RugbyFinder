@using AspNetMonsters.Blazor.Geolocation
@using BlazorApp2.Shared
@inject LocationService  LocationService
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@page "/"



<h1>Welcome @myInfo.MyName</h1>
<p>
    Your Bio: @myInfo.MyBio
</p>
    <h1>@debug</h1>
    <h3>You are here</h3>
    <div>
        Lat: @location?.Latitude <br />
        Long: @location?.Longitude <br />
        Accuracy: @location?.Accuracy <br />

    </div>
    <h3>Your city info</h3>
    <div>
        Country: @closestCity?.Country <br />
        State: @closestCity?.Admin_name <br />
        City: @closestCity?.City <br />
        My Team: @myInfo.TeamName <br />

    </div>
    <div>
        <a class="btn btn-primary" href="/teampicker" role="button">Pick a Team</a>

    </div>

    <EditForm Model="@myInfo" OnValidSubmit="@UpdateNameAsync">

        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="name">Change your name</label>
            <InputText class="form-control" id="name" @bind-Value="@myInfo.MyName" />
        </div>
        <div class="form-group">
            <label for="bio">Change your bio</label>
            <InputTextArea class="form-control" id="bio" @bind-Value="@myInfo.MyBio" />
        </div>
        <button class="btn btn-primary" type="submit">Submit</button>

    </EditForm>




    @functions
{
        Location location;
        CityInfo closestCity;
        Guid guid = Guid.Empty;
        string guidstring = string.Empty;
        //IndexModel indexModel = new IndexModel() { MyBio = string.Empty, MyName = string.Empty };
        //TeamModel teamModel = new TeamModel();
        MyInfo myInfo = new MyInfo() { MyBio = string.Empty, TeamId = Guid.Empty, TeamName = string.Empty, MyName = string.Empty };
        string debug = "Loading...";

        protected override async Task OnInitializedAsync()
        {
#if DEBUG
            await Task.Delay(5000);
#endif
            location = await LocationService.GetLocationAsync();
            guidstring = await sessionStorage.GetItemAsync<string>("guid");
            if (string.IsNullOrEmpty(guidstring))
            {
                guid = Guid.NewGuid();
                await sessionStorage.SetItemAsync("guid", guid.ToString());
                guidstring = guid.ToString();
            }
            else
            {
                if (!Guid.TryParse(guidstring, out guid))
                {
                    guid = Guid.NewGuid();
                    await sessionStorage.SetItemAsync("guid", guid.ToString());
                    guidstring = guid.ToString();
                }
            }
            var args = new CityInfoArgs();
            args.MyGuid = guid;
            args.Lat = (double)location.Latitude;
            args.Lng = (double)location.Longitude;
            var response = await Http.PostAsJsonAsync("City", args);
            myInfo = await Http.GetFromJsonAsync<MyInfo>($"Name/{guid}");
            closestCity = await response.Content.ReadFromJsonAsync<CityInfo>();
            //indexModel.MyBio = inforesponse.MyBio;
            //indexModel.MyName = inforesponse.MyName;
            debug = "Loading Compelete!";

        }
        private async Task UpdateNameAsync()
        {

            var args = new UpdateRuggerArgs();
            args.MyName = myInfo.MyName;
            args.MyGuid = guid;
            args.Bio = myInfo.MyBio;
            await Http.PostAsJsonAsync("Name", args);
        }

    }
