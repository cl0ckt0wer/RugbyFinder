@using AspNetMonsters.Blazor.Geolocation
@using BlazorApp2.Shared
@using BlazorApp2.Shared.Model.Return
@using BlazorApp2.Shared.Model.Args
@using System.Web;

@inject LocationService  LocationService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS

@page "/"

<div class="container-fluid">

    <div class="alert alert-info" role="alert">
        Welcome to the open Alpha of Ruckr! <bold>Find rugby players and teams near you.</bold> Don't see your team? Make it! Issues? <a href="mailto:admin@ruckr.fun">admin@ruckr.fun</a>
    </div>
    <div class="card">
        <div class="card-header">
            @myInfo.MyTeam.TeamBio
        </div>
        @if (!string.IsNullOrEmpty(myInfo.MyImageURI))
        {
            <img id="profilepic" src="@myInfo.MyImageURI" class="card-img-top" />
        }
        <div class="card-body">

            @if (string.IsNullOrEmpty(myInfo.MyName))
            {
                <h5>Please enter a name</h5>
            }
            else
            {
                <h2>@myInfo?.MyName </h2>
                <h6 class="card-subtitle mb-2 text-muted">@myInfo?.MyTeam.TeamName</h6>
                <p class="card-text">@myInfo?.MyBio</p>
                <a href="/teamprofile/@myInfo?.MyTeam.TeamId" class="card-link">Team Profile</a>
            }
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">@myInfo?.ClosestCity?.City</li>
            <li class="list-group-item">@myInfo?.ClosestCity?.Admin_name</li>
            <li class="list-group-item">@myInfo?.ClosestCity?.Country</li>
        </ul>
    </div>

    @*<h1>Your Profile</h1>@if (string.IsNullOrEmpty(myInfo.MyName))
        {
            <h2>Please enter a name</h2>
        }
        else
        {
            <h2>@myInfo.MyName </h2>
        }
        <p class="alert-primary">
            @myInfo.MyTeam.TeamBio
        </p>
        <img id="profilepic" src="@imageDataUri" class="img-thumbnail float-right" />
        <p>
            Your Bio: @myInfo.MyBio
        </p>
        <h3>You are here</h3>
        <div class="container">
            Lat: @location?.Latitude <br />
            Long: @location?.Longitude <br />
            Accuracy: @location?.Accuracy <br />

        </div>
        <h3>Your city info</h3>
        <div class="container">
            Country: @closestCity?.Country <br />
            State: @closestCity?.Admin_name <br />
            City: @closestCity?.City <br />
            My Team: @myInfo.MyTeam.TeamName <br />

        </div>*@
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <button @onclick="EditProfile" class="btn btn-primary">Edit Profile</button>

        </div>
        <div class="col">

            @if (String.IsNullOrEmpty(myInfo?.MyName))
            {

                <div class="alert alert-danger" role="alert">
                    Please fill out your profile before selecting a team.
                </div>
            }
            else
            {
                <button @onclick="PickATeam" class="btn btn-primary" href="/teampicker" role="button">Pick a Team</button>
            }


        </div>
        <div class="col">
            <button @onclick="EditPicture" class="btn btn-primary">Edit Picture</button>
        </div>
        @if (myInfo.TeamOwned != Guid.Empty)
        {
            <div class="col">
                <button @onclick="EditMyTeam" class="btn btn-primary">Edit My Team</button>
            </div>
        }
        @if (UpdateAvailable.Length == 0)
        {
            <div class="col">
                <button @onclick="Reload" class="btn btn-outline-danger">Update App</button>
            </div>
        }

    </div>
</div>

<p class="text-center">
    <br />
    <br />
    🏉🏉🏉🏉🏉
</p>


<div class="@UpdateAvailable alert alert-warning alert-dismissible fade show" role="alert">
    <strong>New update</strong> Please restart the app @Test1
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>





@functions
{
    Location location = new Location();
    //CityInfo closestCity = new CityInfo();
    //Guid guid = Guid.Empty;
    //string guidstring = string.Empty;
    //IndexModel indexModel = new IndexModel() { MyBio = string.Empty, MyName = string.Empty };
    //TeamModel teamModel = new TeamModel();
    MyInfo myInfo = new MyInfo();
    bool debug = true;
    //string imageDataUri = "";
    string format = "image/png";
    //bool teambuttondisabled = true;
    //TeamPostModel tm = new TeamPostModel();
    //IEnumerable<CityInfo> cityInfos = new CityInfo[0];
    public string UpdateAvailable { get; set; } = "d-none";
    public string Test1 { get; set; } = "";
    public string Key { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
#if DEBUG

        //await Task.Delay(5000);
#endif
        try
        {
            Key = await localStorage.GetItemAsync<string>("key");
            Console.WriteLine($"Key pre-key is -{Key}-");
            if (Key == null || Key == "null" || Key == "")
            {
                //get a new key and save it
                var ret = await Http.GetFromJsonAsync<KeyGenReturnModel>("KeyGen");
                await localStorage.SetItemAsync("key", ret.Key);
                Key = ret.Key;
                Console.WriteLine(ret.Key);
            }
            location = await LocationService.GetLocationAsync();
            //guidstring = await localStorage.GetItemAsync<string>("guid");
            //if (string.IsNullOrEmpty(guidstring))
            //{
            //    guid = Guid.NewGuid();
            //    await localStorage.SetItemAsync("guid", guid.ToString());
            //    guidstring = guid.ToString();
            //}
            //else
            //{
            //    if (!Guid.TryParse(guidstring, out guid))
            //    {
            //        guid = Guid.NewGuid();
            //        await localStorage.SetItemAsync("guid", guid.ToString());
            //        guidstring = guid.ToString();
            //    }
            //}
            //var args = new MyProfileArgs();
            //args.Lat = (double)location.Latitude;
            //args.Long = (double)location.Longitude;
            //args.Key = Key;

            //var response = await Http.PostAsJsonAsync("City", args);
            //myInfo = await Http.GetFromJsonAsync<MyInfo>($"Name/{guid}");
            myInfo = await Http.GetFromJsonAsync<MyInfo>($"MyProfile/{HttpUtility.UrlEncode(Key)}/{location.Latitude}/{location.Longitude}");
            if (myInfo.MyName.Length < 2)
            {
                EditProfile();
            }

            //if (!string.IsNullOrEmpty(myInfo.MyName))
            //{
            //    teambuttondisabled = false;
            //}
            //closestCity = await response.Content.ReadFromJsonAsync<CityInfo>();
            //if (myInfo.ProfilePic != null && myInfo.ProfilePic.Length > 0)
            //{
            //    imageDataUri = $"data:{format};base64,{Convert.ToBase64String(myInfo.ProfilePic)}";
            //}
            //tm = await Http.GetFromJsonAsync<TeamPostModel>($"teamowner/{guid}");
            //cityInfos = await Http.GetFromJsonAsync<IEnumerable<CityInfo>>($"City/{guidstring}");
            var iua = await JS.InvokeAsync<bool>("CheckWaitingServiceWorker");
            if (iua)
            {
                UpdateAvailable = "";
            }
        }
        catch (Exception ex)
        {
            var eargs = new ExceptionArgs();
            eargs.MyGuid = myInfo.MyId;
            eargs.Myexception =  ex.InnerException + ex.Message + ex.Source + ex.StackTrace;
            await Http.PostAsJsonAsync("Exception", eargs);
            throw;
        }



    }
    private async Task UpdateNameAsync()
    {
        if (!string.IsNullOrEmpty(myInfo.MyName))
        {
            var args = new UpdateRuggerArgs();
            args.MyName = myInfo.MyName;
            args.Key = Key;
            args.Bio = myInfo.MyBio;
            await Http.PostAsJsonAsync("MyProfile/UpdateProfile", args);
        }
    }
    //private async Task UpdateTeamAsync()
    //{
    //    if (!string.IsNullOrEmpty(tm.TeamName))
    //    {
    //        var args = (TeamPostModel)tm;
    //        args.RuggerOwner = guid;
    //        await Http.PostAsJsonAsync("/teams", args);
    //    }
    //}
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {

        var browserFile = await e.File.RequestImageFileAsync(format, 300, 300);
        using var stream = browserFile.OpenReadStream(maxAllowedSize: 8000000);
        var buffer = new byte[stream.Length];
        await stream.ReadAsync(buffer);
        var args = new RuggerPic() { Pic = buffer, RuggerKey = Key };
        await Http.PostAsJsonAsync("RuggerPic", args);
        myInfo.ProfilePic = buffer;
        //imageDataUri = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    }
    private void PickATeam()
    {
        NavigationManager.NavigateTo("/teampicker");
    }
    //private async void TeamPicChange(InputFileChangeEventArgs e)
    //{
    //    var browserFile = await e.File.RequestImageFileAsync(format, 300, 300);
    //    using var stream = browserFile.OpenReadStream(maxAllowedSize: 8000000);
    //    var buffer = new byte[stream.Length];
    //    await stream.ReadAsync(buffer);
    //    tm.TeamPic = buffer;
    //    var x = (tm.TeamImageURI == $"data:{format};base64,{Convert.ToBase64String(buffer)}");
    //}
    private void EditProfile()
    {
        NavigationManager.NavigateTo("/editrugger");
    }
    private void EditPicture()
    {
        NavigationManager.NavigateTo("/editruggerpic");
    }
    private void EditMyTeam()
    {
        NavigationManager.NavigateTo("/editmyteam");
    }
    private async Task Reload()
    {
        await JS.InvokeVoidAsync("ReloadServiceWorker");

    }
}
