@using AspNetMonsters.Blazor.Geolocation
@using BlazorApp2.Shared
@inject LocationService  LocationService
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager



@page "/messagerugger/{id:guid}"


<h3>MessageRugger</h3>
<div class="container-fluid">
    <EditForm Model="@Messagetosend" OnValidSubmit="@HandleSendMessage">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="message">Type a message:</label>
        <InputText id="message"  @bind-Value="Messagetosend" />

        <button class="btn btn-primary"  type="submit">Submit</button>
    </EditForm>
</div>
<ul class="list-group">
    @foreach (var m in messModel.MyMessage)
    {
        <li class="list-group-item">@m</li>
    }
</ul>
@code {
    [Parameter]
    public Guid Id { get; set; }
    private string guidstring = string.Empty;
    public RuggerMessageModel messModel = new RuggerMessageModel();
    public string Messagetosend = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        //get pending messages
        guidstring = await localStorage.GetItemAsync<string>("guid");
        if (string.IsNullOrEmpty(guidstring))
        {
            NavigationManager.NavigateTo("/");
        }
        var rmargs = new RuggerMessagePostArgs();
        rmargs.TheirGuid = Id;
        rmargs.MyGuid = Guid.Parse(guidstring);

        var response = await Http.PostAsJsonAsync("ruggermessage", rmargs);
        var messModel = await response.Content.ReadFromJsonAsync<RuggerMessageModel>();

    }
}